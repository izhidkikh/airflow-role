---

- name: Airflow | Ensure Airflow group
  group:
    name: "{{ airflow_group }}"

- name: Airflow | Ensure Airflow user
  user:
    name: "{{ airflow_user }}"
    group: "{{ airflow_group }}"
    shell: /bin/bash

- name: Airflow | Create path for Airflow home
  file:
    path: "{{ airflow_home }}"
    state: directory
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"

- name: Airflow | Create path for configuration files
  file:
    path: "{{ airflow_environment_file_folder }}"
    state: directory
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"

#- name: Airflow | Installing dependencies
#  apt:
#    pkg: "{{ airflow_required_libs }}"
#    state: present
#    update_cache: yes
    
#- name: Airflow | Installing dependencies
#  yum:
#    pkg: "{{ airflow_required_libs }}"
#    state: present
#    update_cache: yes

- name: Airflow | Installing Python pip dependencies
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "{{ item.name }}"
    version: "{{ item.version | default(omit) }}"
  with_items: "{{ airflow_required_python_packages }}"

- name: Airflow | Installing proper Celery version
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: celery
    version: "{{ celery_version }}"
  when: airflow_executor == "CeleryExecutor"

- name: Airflow | Installing extra Celery packages
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: celery[{{ item }}]
    version: "{{ celery_version }}"
  with_items: "{{ celery_extra_packages }}"
  when: airflow_executor == "CeleryExecutor" and celery_extra_packages

- name: Airflow | Set AIRFLOW_HOME environment variable in /etc/environment
  lineinfile:
    path: /etc/environment
    line: 'AIRFLOW_HOME={{ airflow_home }}'

#- name: Airflow | Installing Pip
#  pip:
#    executable: "{{ airflow_pip_executable }}"
#    name: pip
#    state: latest

- name: Install DeltaRPM
  yum:
    name: "{{ item }}"
  with_items:
  - python-setuptools
  - python-pip
  - python2-pip
  - acl
  - gcc
  - sudo
  - git


- name: Install fabric binary dependencies
  yum:
    name: "{{ item }}"
    state: present
    disable_gpg_check: yes
  with_items:
  - deltarpm
  - python36u-devel

- name: install the package, force upgrade
  pip:
    name: pip
    executable: "{{ airflow_pip_executable }}"
    state: latest

- name: Airflow | Installing Airflow
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: apache-airflow
    version: "{{ airflow_version }}"
    extra_args: --no-cache-dir
    state: forcereinstall
  register: airflow_install
  environment:
    SLUGIFY_USES_TEXT_UNIDECODE: "yes"
    
- name: Changing perm of {{ airflow_executable }}, adding "+x"
  file: dest={{ airflow_executable }} mode=a+x   
    
- name: Airflow | Installing Airflow Extra Packages (prior to Ansible 2.7)
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "apache-airflow[{{ item }}]=={{ airflow_version }}"
  with_items: "{{ airflow_extra_packages }}"
  when: 
    - airflow_extra_packages
    - ansible_version.full is version_compare('2.7', '<')

- name: Airflow | Installing Airflow Extra Packages
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "apache-airflow[{{ airflow_extra_packages | join(', ') }}]"
    version: "{{ airflow_version }}"
  when: 
    - airflow_extra_packages
    - ansible_version.full is version_compare('2.7', '>=')

- name: Airflow | Installing DAGs dependencies
  pip:
    executable: "{{ airflow_pip_executable }}"
    name: "{{ item.name }}"
    version: "{{ item.version }}"
  with_items: "{{ dags_dependencies }}"
  when: dags_dependencies
  notify:
    - restart airflow-webserver
    - restart airflow-scheduler
    - restart airflow-worker
    - restart airflow-flower

- name: Airflow | Copy Environment File
  template:
    src: airflow-environment-file.j2
    dest: "{{ airflow_environment_file_folder }}/airflow"
    mode: 0644
    owner: "{{ airflow_user }}"
    group: "{{ airflow_group }}"

- name: Airflow | Copy Daemon scripts
  template:
    src: "{{ item.key }}.service.j2"
    dest: /etc/systemd/system/{{ item.key }}.service
    mode: 0644
  notify: restart {{ item.key }}
  with_dict: "{{ airflow_services }}"
  when: item.value.enabled
